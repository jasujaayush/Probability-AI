
Part A
----------------------------------

[-0.728825024971, -1.758318093812, -1.107983124283, -1.52742211628, -0.62046897950, -1.171136933825, 0.805301685047, 1.96294918213]
[-0.266256096872, -0.263791939483, 0.329492582402, -0.0392013429985, -0.681302521109, 0.988834968869, -1.486514235663, -1.49561697545]
[4.45393129837, 1.393867521638, 1.617377199512, 0.0997561625295, 1.013617959358, -2.4474966402, -2.4598147175, -2.91951873996]
[0.753194802081, 0.3615264150166, 0.785399413368, -0.370059444476, -0.516626234959, -2.78071736061, 0.526661507673, -0.0631965825087]
[0.655773336066, 1.317579329149, 0.1050232908553, -0.469500475852, -0.637111903093, -0.03612107647263, -0.663585582859, -0.074614314513]
[1.331036881977, -0.2942784757612, -0.436564150451, -0.2284289666173, -0.0402109705742, -1.153232352118, 1.028065107235, -1.874285655350]
[1.734906878095, -0.77311111429, 1.415310392681, 0.728013652818, 0.540407326139, -0.4711305897746, 0.1282868509034, -1.718876175070]
[0.732737621803, 0.344945244182, 0.82663514623, 2.62811998061, 0.4426141775608, 0.741868807580, 0.96171183974, -0.618837478457]


Part B
---------------------------------
Using the above mentioned 8*8 weight vector, The accuracy of testing data was
	Test3 dataset :  371/400 , Error rate = 7.5
	Test5 dataset :  377/400 , Error rate = 5.75

Part C
---------------------------------
import csv
import numpy as np
import math
from scipy.linalg import solve

testData = []
testData5 = []
data = []
value = []

with open('train3.txt') as v:
        k = v.read().splitlines()
for x in k:
	t = x.strip().split(' ')
	l = []
	for y in t:
		l.append(float(y))
	data.append(l)
	value.append(0) #0 means 3

with open('train5.txt') as v1:
        k1 = v1.read().splitlines()
for x in k1:
        t = x.strip().split(' ')
	l = []
        for y in t:
                l.append(float(y))
        data.append(l)
        value.append(1) #1 means 5


with open('test3.txt') as v:
        k = v.read().splitlines()
for x in k:
        t = x.strip().split(' ')
        l = []
        for y in t:
                l.append(float(y))
        testData.append(l)

with open('test5.txt') as v:
        k = v.read().splitlines()
for x in k:
        t = x.strip().split(' ')
        l = []
        for y in t:
                l.append(float(y))
        testData5.append(l)


def sigmoid(t,w):
	v = 0.0
	for i in xrange(0,len(l)):
		v = v + t[i]*w[i]
	v = 1/(1+math.exp(-v))
	return v

def scaleVector(x, y):
	value = []
	for i in xrange(0, len(x)):
		value.append(x[i]*y)
	return value

def addVectors(x, y):
        value = []
        for i in xrange(0, len(x)):
                value.append(x[i]+y[i])
        return value

def gradient(y,w,x):
	g = []
	for i in xrange(0,64):
		g.append(0.0)
	for i in xrange(0,len(y)):
		temp = sigmoid(x[i],w)
		value = y[i] - temp
		sV = scaleVector(x[i], value)
		g = addVectors(g,sV)
	return g

w = []
n = .000075
for i in xrange(0,64):
                w.append(0.0)

iteration = 1
testc = 0
while(True):
	g = gradient(value,w,data)
	s = scaleVector(g,n)
	w = addVectors(w, s)
	#print g
	c = 0
	testc5 = 0 
	testc = 0
	likelihood = 0
	for i in xrange(0,len(data)):
                temp = sigmoid(data[i],w)
		if temp < 0.5 and i < 700:
			c = c + 1
		elif temp > 0.5 and i > 700:
			c = c + 1
		likelihood = likelihood + math.log(temp)
	print "training : ", iteration, c , likelihood
	iteration = iteration + 1
	for i in xrange(0,len(testData)):
                temp = sigmoid(testData[i],w)
                if temp < 0.5:
                        testc = testc + 1
        print "test3 : ", len(testData), testc
	for i in xrange(0,len(testData5)):
                temp = sigmoid(testData5[i],w)
                if temp > 0.5:
                        testc5 = testc5 + 1
        print "test5 : ", len(testData5), testc5
	if iteration % 50 == 0:
		plotdata = []
		with open('data35.csv', 'a') as fp:
			plotdata.append([iteration, likelihood, (1-float(c)/1400)*100])
    			a = csv.writer(fp, delimiter=',')
    			a.writerows(plotdata)
		f1 = open('W.txt', 'w+')
		print >> f1, iteration , '\n'
		for k in xrange(0,8):
			print >> f1, w[k*8: (k+1)*8]
		print >> f1, '\n'



